#summary The design of HeeksCNC

http://4.bp.blogspot.com/_lpgMldGi1O4/SY4fIDNnMQI/AAAAAAAAAHQ/3Ct9u1HceVM/s1600/HeeksCNC+structure.png

HeeksCNC adds the "Program", "Operations", "Profile", "Pocket", "ZigZag", "NC Code" object types to HeeksCAD. It uses these to create a script and then copies that script to a Python file "post.py". This file is a stand-alone Python file, that can be run outside HeeksCNC ( for testing, for example ), but it will need various Python modules to do this.
kurve.so, actp.so and area.so, are Python modules.
They should not be added as plugins to HeeksCAD, they are not HeeksCAD plugins.
They just need to be built and put in the right place.
At the moment, post.py expects kurve.so and area.so to be copied to HeeksCAD\HeeksCNC.
~~If you use the ZigZag operation, it creates script which expects the pycam stuff to be in a structure like this: HeeksCAD\HeeksCNC\PyCam\trunk\pycam\Geometry~~

When post.py is run, it should create the nc file ( test.tap for example ).

When post.py has been run from the "G0" button in HeeksCNC's program window, it then calls nc/iso_read.py to make an xml file ( test.tap.nc.xml for example ) which contains a list of NC code blocks and their associated toolpath. This is then imported into HeeksCNC so that it can display the NC code and the toolpath.

== Working Units (mm/inch) ==

The HeeksCAD and HeeksCNC applications support the use of either millimeters (mm) or inch working units.  The settings are available as properties of the Program icon.  All values held both in memory and in the XML data files are ALWAYS stored in millimeters.  If inches are required in the Program properties, the conversion is made at the 'last minute' before presentation to the operator.  i.e. when displaying values in the various Properties pages as well as in any generated GCode.

In the case of a Property, the PropertyLength class makes this function more convenient.  i.e. it converts into whatever working units are appropriate when presenting values to the operator.  Similarly, it automatically converts any modified values back into millimeters before passing the value back to any internal memory structures.